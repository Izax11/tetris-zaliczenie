{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\n\nfunction BoardComponent_tile_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tile\", 1);\n  }\n\n  if (rf & 2) {\n    const tileData_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", tileData_r1);\n  }\n}\n\nvar PieceRotation;\n\n(function (PieceRotation) {\n  PieceRotation[PieceRotation[\"DEG_0\"] = 0] = \"DEG_0\";\n  PieceRotation[PieceRotation[\"DEG_90\"] = 1] = \"DEG_90\";\n  PieceRotation[PieceRotation[\"DEG_180\"] = 2] = \"DEG_180\";\n  PieceRotation[PieceRotation[\"DEG_270\"] = 3] = \"DEG_270\";\n})(PieceRotation || (PieceRotation = {}));\n\nvar PieceTypes;\n\n(function (PieceTypes) {\n  PieceTypes[PieceTypes[\"Dot\"] = 1] = \"Dot\";\n  PieceTypes[PieceTypes[\"Box\"] = 2] = \"Box\";\n  PieceTypes[PieceTypes[\"Line\"] = 3] = \"Line\";\n  PieceTypes[PieceTypes[\"T\"] = 4] = \"T\";\n  PieceTypes[PieceTypes[\"L\"] = 5] = \"L\";\n  PieceTypes[PieceTypes[\"Lr\"] = 6] = \"Lr\";\n  PieceTypes[PieceTypes[\"Z\"] = 7] = \"Z\";\n  PieceTypes[PieceTypes[\"S\"] = 8] = \"S\";\n})(PieceTypes || (PieceTypes = {})); // picked from https://www.romanzolotarev.com/pico-8-color-palette/\n\n\nvar PieceColors;\n\n(function (PieceColors) {\n  PieceColors[\"Box\"] = \"color-box\";\n  PieceColors[\"Dot\"] = \"color-dot\";\n  PieceColors[\"Line\"] = \"color-line\";\n  PieceColors[\"T\"] = \"color-t\";\n  PieceColors[\"L\"] = \"color-l\";\n  PieceColors[\"Lr\"] = \"color-lr\";\n  PieceColors[\"Z\"] = \"color-z\";\n  PieceColors[\"S\"] = \"color-s\";\n})(PieceColors || (PieceColors = {}));\n\nclass Piece {\n  constructor(x, y, gridSize, maps) {\n    this.color = 'red';\n    this.rotation = PieceRotation.DEG_0;\n    this.map = [[], []];\n    this._lastConfig = null;\n    this._gridSize = gridSize;\n    this.x = x;\n    this.y = y;\n    this._maps = maps;\n    this.map = this._maps[this.rotation];\n  }\n\n  get positionsOnGrid() {\n    const acc = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.map[row][col]) {\n          const pos = (this.y + row) * this._gridSize.width + this.x + col;\n\n          if (pos > 0) {\n            acc.push(pos);\n          }\n        }\n      }\n    }\n\n    return acc;\n  }\n\n  store() {\n    this._lastConfig = {\n      x: this.x,\n      y: this.y,\n      rotation: this.rotation,\n      map: this.map\n    };\n  }\n\n  clearStore() {\n    this._lastConfig = null;\n  }\n\n  revert() {\n    if (this._lastConfig) {\n      for (const x in this._lastConfig) {\n        if (this._lastConfig.hasOwnProperty(x)) {\n          // @ts-ignore\n          this[x] = this._lastConfig[x];\n        }\n      }\n\n      this._lastConfig = null;\n    }\n  }\n\n  rotate() {\n    const keys = Object.keys(this._maps);\n    let idx = keys.indexOf(this.rotation.toString());\n\n    if (idx >= keys.length - 1) {\n      this.rotation = keys[0];\n    } else {\n      this.rotation = keys[++idx];\n    }\n\n    this.map = this._maps[this.rotation];\n  }\n\n  moveDown() {\n    this.y++;\n  }\n\n  moveRight() {\n    this.x++;\n  }\n\n  moveLeft() {\n    this.x--;\n  }\n\n  get bottomRow() {\n    return this.y + 3;\n  }\n\n  get rightCol() {\n    let col = 3;\n\n    while (col >= 0) {\n      for (let row = 0; row <= 3; row++) {\n        if (this.map[row][col]) {\n          return this.x + col;\n        }\n      }\n\n      col--;\n    }\n\n    return 0;\n  }\n\n  get leftCol() {\n    return this.x;\n  }\n\n}\n\nconst MAPS$7 = [];\nMAPS$7[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, undefined, undefined, undefined]];\n\nclass Dot extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$7);\n    this.color = PieceColors['Dot'];\n  }\n\n}\n\nconst MAPS$6 = [];\nMAPS$6[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined]];\n\nclass Box extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$6);\n    this.color = PieceColors['Box'];\n  }\n\n}\n\nconst MAPS$5 = [];\nMAPS$5[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line]];\nMAPS$5[PieceRotation.DEG_90] = [[PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined]];\n\nclass Line extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$5);\n    this.color = PieceColors['Line'];\n  }\n\n}\n\nconst MAPS$4 = [];\nMAPS$4[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined]];\nMAPS$4[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined]];\nMAPS$4[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined], [undefined, PieceTypes.T, undefined, undefined]];\nMAPS$4[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined]];\n\nclass T extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$4);\n    this.color = PieceColors['T'];\n  }\n\n}\n\nconst MAPS$3 = [];\nMAPS$3[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, undefined, undefined, undefined]];\nMAPS$3[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [undefined, PieceTypes.Z, PieceTypes.Z, undefined]];\n\nclass Z extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$3);\n    this.color = PieceColors['Z'];\n  }\n\n}\n\nconst MAPS$2 = [];\nMAPS$2[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.S, undefined, undefined, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined], [undefined, PieceTypes.S, undefined, undefined]];\nMAPS$2[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.S, PieceTypes.S, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined]];\n\nclass S extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$2);\n    this.color = PieceColors['S'];\n  }\n\n}\n\nconst MAPS$1 = [];\nMAPS$1[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined], [PieceTypes.L, undefined, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined]];\nMAPS$1[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.L, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined]];\n\nclass L extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$1);\n    this.color = PieceColors['L'];\n  }\n\n}\n\nconst MAPS = [];\nMAPS[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined]];\nMAPS[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.Lr, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined]];\nMAPS[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined]];\nMAPS[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined], [PieceTypes.Lr, undefined, undefined, undefined]];\n\nclass Lr extends Piece {\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS);\n    this.color = PieceColors['Lr'];\n  }\n\n}\n\nclass PiecesFactory {\n  constructor(_gridSize) {\n    this._gridSize = _gridSize;\n    this._available = []; // @ts-ignore\n\n    this._available.push(Dot); // @ts-ignore\n\n\n    this._available.push(Box); // @ts-ignore\n\n\n    this._available.push(Line); // @ts-ignore\n\n\n    this._available.push(T); // @ts-ignore\n\n\n    this._available.push(Z); // @ts-ignore\n\n\n    this._available.push(S); // @ts-ignore\n\n\n    this._available.push(L); // @ts-ignore\n\n\n    this._available.push(Lr);\n  }\n\n  getRandomPiecePiece(x, y) {\n    const idx = Math.floor(Math.random() * this._available.length); // @ts-ignore\n\n    return new this._available[idx](x, y, this._gridSize); // return new this._available[2](x, y, this._gridSize);\n  }\n\n}\n\nconst SPAWN_POSITION_X = 4;\nconst SPAWN_POSITION_Y = -4;\n\nclass Tile {\n  constructor() {\n    this.solid = false;\n    this.color = null;\n  }\n\n}\n\nclass GameManagerService {\n  constructor() {\n    this.settings = {\n      tileSize: null\n    };\n    this._gridSize = {\n      width: 0,\n      height: 0\n    };\n    this._locked = true;\n    this._lineCleared = new Subject();\n    this._gameOver = new Subject();\n    this._keepMovingDown = false;\n    this.lineCleared$ = this._lineCleared.asObservable();\n    this.gameOver$ = this._gameOver.asObservable();\n  }\n\n  get elementsInRow() {\n    return this._gridSize.width;\n  }\n\n  initialize(width, height, gameSpeed, tileSize) {\n    this._gridSize.width = width;\n    this._gridSize.height = height;\n    this._gameSpeed = gameSpeed;\n    this._piecesFactory = new PiecesFactory(this._gridSize);\n\n    if (tileSize) {\n      this.settings.tileSize = tileSize;\n    }\n\n    this._initializeEmptyBoard();\n\n    this._spawnNewPiece();\n\n    this._drawPiece();\n  }\n\n  start() {\n    clearInterval(this._gameInterval);\n    this._gameInterval = setInterval(() => {\n      this._update();\n    }, this._gameSpeed);\n    this._locked = false;\n  }\n\n  stop() {\n    this._locked = true;\n    clearInterval(this._gameInterval);\n  }\n\n  reset() {\n    const emptyTile = new Tile();\n\n    for (let pos = 0; pos < this.grid.length; pos++) {\n      if (this.grid[pos].color || this.grid[pos].solid) {\n        this.__changeCell(pos, emptyTile);\n      }\n    }\n\n    this._spawnNewPiece();\n\n    this._drawPiece();\n  }\n\n  moveLeft() {\n    if (this._locked) {\n      return;\n    }\n\n    this._clearPiece();\n\n    this._piece.store();\n\n    this._piece.moveLeft();\n\n    if (this._collidesLeft()) {\n      this._piece.revert();\n    }\n\n    this._drawPiece();\n  }\n\n  moveRight() {\n    if (this._locked) {\n      return;\n    }\n\n    this._clearPiece();\n\n    this._piece.store();\n\n    this._piece.moveRight();\n\n    if (this._collidesRight()) {\n      this._piece.revert();\n    }\n\n    this._drawPiece();\n  }\n\n  drop() {\n    if (this._locked) {\n      return;\n    }\n\n    this._keepMovingDown = true;\n\n    while (!this._collidesBottom() && this._keepMovingDown) {\n      this._update();\n    }\n  }\n\n  rotate() {\n    if (this._locked) {\n      return;\n    }\n\n    this._clearPiece();\n\n    this._piece.store();\n\n    this._piece.rotate();\n\n    while (this._collidesRight()) {\n      this._piece.moveLeft();\n\n      if (this._collidesLeft()) {\n        this._piece.revert();\n\n        break;\n      }\n    }\n\n    this._drawPiece();\n  }\n\n  moveDown() {\n    this._update();\n  }\n\n  _clearFullLines() {\n    for (let row = this._gridSize.height - 1; row >= 0; row--) {\n      let isFull = true;\n\n      for (let col = 0; col < this._gridSize.width; col++) {\n        const pos = row * this._gridSize.width + col;\n\n        if (this.grid[pos].solid === false) {\n          isFull = false;\n          break;\n        }\n      }\n\n      if (isFull) {\n        const emptyRow = Array.apply(null, Array(this._gridSize.width)).map(idx => new Tile());\n        const topPortion = this.grid.slice(0, row * this._gridSize.width);\n        this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));\n\n        this._lineCleared.next();\n      }\n    }\n  }\n\n  _update() {\n    if (this._locked) {\n      return;\n    }\n\n    this._locked = true;\n\n    this._piece.revert();\n\n    this._clearPiece();\n\n    this._piece.store();\n\n    this._piece.moveDown();\n\n    if (this._collidesBottom()) {\n      this._keepMovingDown = false;\n\n      this._piece.revert();\n\n      this._markSolid();\n\n      this._drawPiece();\n\n      this._clearFullLines();\n\n      this._spawnNewPiece();\n\n      if (this._isGameOver()) {\n        this._onGameOver();\n\n        return;\n      }\n    }\n\n    this._drawPiece();\n\n    this._locked = false;\n  }\n\n  _isGameOver() {\n    this._piece.store();\n\n    this._piece.moveDown();\n\n    if (this._collidesBottom()) {\n      return true;\n    }\n\n    this._piece.revert();\n\n    return false;\n  }\n\n  _onGameOver() {\n    this.stop();\n\n    this._gameOver.next();\n  }\n\n  _spawnNewPiece() {\n    this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);\n  }\n\n  _initializeEmptyBoard() {\n    const cellsCount = this._gridSize.width * this._gridSize.height;\n    this.grid = Array.apply(null, Array(cellsCount)).map(idx => new Tile());\n  }\n\n  _clearPiece() {\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        color: undefined\n      });\n    });\n  }\n\n  _drawPiece() {\n    this._piece.clearStore();\n\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        color: this._piece.color\n      });\n    });\n  }\n\n  _markSolid() {\n    this._piece.positionsOnGrid.forEach(pos => {\n      this.__changeCell(pos, {\n        solid: true\n      });\n    });\n  }\n\n  __changeCell(pos, data = {}) {\n    this.grid[pos] = Object.assign({}, this.grid[pos], data);\n  }\n\n  _collidesBottom() {\n    if (this._piece.bottomRow >= this._gridSize.height) {\n      return true;\n    }\n\n    return this.__collides();\n  }\n\n  _collidesLeft() {\n    if (this._piece.leftCol < 0) {\n      return true;\n    }\n\n    return this.__collides();\n  }\n\n  _collidesRight() {\n    if (this._piece.rightCol >= this._gridSize.width) {\n      return true;\n    }\n\n    return this.__collides();\n  }\n\n  __collides() {\n    return this._piece.positionsOnGrid.some(pos => {\n      if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n}\n\nGameManagerService.ɵfac = function GameManagerService_Factory(t) {\n  return new (t || GameManagerService)();\n};\n\nGameManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GameManagerService,\n  factory: GameManagerService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GameManagerService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass TileComponent {\n  constructor(el, _renderer, _manager) {\n    this.el = el;\n    this._renderer = _renderer;\n    this._manager = _manager;\n    this.tileSize = null;\n\n    if (this._manager.settings.tileSize) {\n      this.tileSize = this._manager.settings.tileSize;\n    }\n  }\n\n  ngOnInit() {\n    if (this.data.color) {\n      this._renderer.addClass(this.el.nativeElement, this.data.color);\n    }\n  }\n\n}\n\nTileComponent.ɵfac = function TileComponent_Factory(t) {\n  return new (t || TileComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(GameManagerService));\n};\n\nTileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TileComponent,\n  selectors: [[\"tile\"]],\n  hostVars: 4,\n  hostBindings: function TileComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.tileSize)(\"height\", ctx.tileSize);\n    }\n  },\n  inputs: {\n    data: \"data\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function TileComponent_Template(rf, ctx) {},\n  styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TileComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tile',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[style.width]': 'tileSize',\n        '[style.height]': 'tileSize'\n      },\n      template: \"\",\n      styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: GameManagerService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nclass BoardComponent {\n  constructor(_manager, _elRef) {\n    this._manager = _manager;\n    this._elRef = _elRef;\n  }\n\n  ngAfterViewInit() {\n    if (this._manager.settings.tileSize) {\n      const bb = this.tile.el.nativeElement.getBoundingClientRect();\n      const TILE_MARGIN = 1; //px\n\n      const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n      const boardWidth = oneTileSpace * this._manager.elementsInRow;\n      this._elRef.nativeElement.style['width'] = boardWidth + 'px';\n    }\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(GameManagerService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBoardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  viewQuery: function BoardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TileComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tile = _t.first);\n    }\n  },\n  inputs: {\n    grid: \"grid\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"data\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BoardComponent_tile_0_Template, 1, 1, \"tile\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n    }\n  },\n  dependencies: [TileComponent, i3.NgForOf],\n  styles: [\"[_nghost-%COMP%]{width:290px;display:block}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'board',\n      template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\",\n      styles: [\":host{width:290px;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: GameManagerService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    grid: [{\n      type: Input\n    }],\n    tile: [{\n      type: ViewChild,\n      args: [TileComponent]\n    }]\n  });\n})();\n\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\n\nvar GameState;\n\n(function (GameState) {\n  GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n  GameState[GameState[\"Started\"] = 1] = \"Started\";\n  GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\n\nclass TetrisCoreComponent {\n  constructor(_manager) {\n    this._manager = _manager;\n    this.initialSpeed = GAME_SPEED;\n    this.rotate = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.moveDown = false;\n    this.drop = false;\n    this.start = false;\n    this.stop = false;\n    this.reset = false;\n    this.lineCleared = new EventEmitter();\n    this.gameOver = new EventEmitter();\n    this.state = GameState.Paused;\n    this.gridWidth = 10;\n    this.gridHeight = 20;\n    this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n\n    this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n\n    this._manager.gameOver$.subscribe(() => this._onGameOver());\n  }\n\n  ngOnInit() {\n    this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n\n    this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n\n    this.grid = this._manager.grid;\n    setInterval(() => {\n      if (this.moveDown) {\n        this._manager.moveDown();\n      }\n    }, this._moveDownSpeed);\n  }\n\n  ngOnChanges(changes) {\n    if (this._keyPressed(changes['moveLeft'])) {\n      this._manager.moveLeft();\n    } else if (this._keyPressed(changes['moveRight'])) {\n      this._manager.moveRight();\n    } else if (this._keyPressed(changes['drop'])) {\n      this._manager.drop();\n    }\n\n    if (this._keyPressed(changes['rotate'])) {\n      this._manager.rotate();\n    }\n\n    if (this._keyPressed(changes['start'])) {\n      this._manager.start();\n    }\n\n    if (this._keyPressed(changes['stop'])) {\n      this._manager.stop();\n    }\n\n    if (this._keyPressed(changes['reset'])) {\n      this._manager.reset();\n    }\n  }\n\n  actionLeft() {\n    this._manager.moveLeft();\n  }\n\n  actionRight() {\n    this._manager.moveRight();\n  }\n\n  actionRotate() {\n    this._manager.rotate();\n  }\n\n  actionDown() {\n    this._manager.moveDown();\n  }\n\n  actionDrop() {\n    this._manager.drop();\n  }\n\n  actionReset() {\n    this._manager.reset();\n  }\n\n  actionStart() {\n    this._manager.start();\n\n    this.state = GameState.Started;\n  }\n\n  actionStop() {\n    this._manager.stop();\n\n    this.state = GameState.Paused;\n  }\n\n  _keyPressed(key) {\n    return key && key.currentValue && !key.previousValue;\n  }\n\n  _onLineCleared() {\n    this.lineCleared.emit();\n  }\n\n  _onGameOver() {\n    this.state = GameState.Over;\n    this.gameOver.emit();\n  }\n\n}\n\nTetrisCoreComponent.ɵfac = function TetrisCoreComponent_Factory(t) {\n  return new (t || TetrisCoreComponent)(i0.ɵɵdirectiveInject(GameManagerService));\n};\n\nTetrisCoreComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TetrisCoreComponent,\n  selectors: [[\"tetris-core\"]],\n  inputs: {\n    tileSize: \"tileSize\",\n    initialSpeed: \"initialSpeed\",\n    rotate: \"rotate\",\n    moveLeft: \"moveLeft\",\n    moveRight: \"moveRight\",\n    moveDown: \"moveDown\",\n    drop: \"drop\",\n    start: \"start\",\n    stop: \"stop\",\n    reset: \"reset\"\n  },\n  outputs: {\n    lineCleared: \"lineCleared\",\n    gameOver: \"gameOver\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"grid\"]],\n  template: function TetrisCoreComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"board\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"grid\", ctx.grid);\n    }\n  },\n  dependencies: [BoardComponent],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TetrisCoreComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tetris-core',\n      template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: GameManagerService\n    }];\n  }, {\n    tileSize: [{\n      type: Input\n    }],\n    initialSpeed: [{\n      type: Input\n    }],\n    rotate: [{\n      type: Input\n    }],\n    moveLeft: [{\n      type: Input\n    }],\n    moveRight: [{\n      type: Input\n    }],\n    moveDown: [{\n      type: Input\n    }],\n    drop: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    stop: [{\n      type: Input\n    }],\n    reset: [{\n      type: Input\n    }],\n    lineCleared: [{\n      type: Output\n    }],\n    gameOver: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TetrisCoreModule {}\n\nTetrisCoreModule.ɵfac = function TetrisCoreModule_Factory(t) {\n  return new (t || TetrisCoreModule)();\n};\n\nTetrisCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TetrisCoreModule\n});\nTetrisCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [GameManagerService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TetrisCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TetrisCoreComponent, BoardComponent, TileComponent],\n      providers: [GameManagerService],\n      exports: [TetrisCoreComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-tetris\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GameState, TetrisCoreComponent, TetrisCoreModule };","map":{"version":3,"names":["i0","Injectable","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ViewChild","EventEmitter","Output","NgModule","i3","CommonModule","Subject","PieceRotation","PieceTypes","PieceColors","Piece","constructor","x","y","gridSize","maps","color","rotation","DEG_0","map","_lastConfig","_gridSize","_maps","positionsOnGrid","acc","row","col","pos","width","push","store","clearStore","revert","hasOwnProperty","rotate","keys","Object","idx","indexOf","toString","length","moveDown","moveRight","moveLeft","bottomRow","rightCol","leftCol","MAPS$7","undefined","Box","Dot","MAPS$6","MAPS$5","Line","DEG_90","MAPS$4","T","DEG_180","DEG_270","MAPS$3","Z","MAPS$2","S","MAPS$1","L","MAPS","Lr","PiecesFactory","_available","getRandomPiecePiece","Math","floor","random","SPAWN_POSITION_X","SPAWN_POSITION_Y","Tile","solid","GameManagerService","settings","tileSize","height","_locked","_lineCleared","_gameOver","_keepMovingDown","lineCleared$","asObservable","gameOver$","elementsInRow","initialize","gameSpeed","_gameSpeed","_piecesFactory","_initializeEmptyBoard","_spawnNewPiece","_drawPiece","start","clearInterval","_gameInterval","setInterval","_update","stop","reset","emptyTile","grid","__changeCell","_clearPiece","_piece","_collidesLeft","_collidesRight","drop","_collidesBottom","_clearFullLines","isFull","emptyRow","Array","apply","topPortion","slice","splice","concat","next","_markSolid","_isGameOver","_onGameOver","cellsCount","forEach","data","assign","__collides","some","ɵfac","ɵprov","type","TileComponent","el","_renderer","_manager","ngOnInit","addClass","nativeElement","ElementRef","Renderer2","ɵcmp","args","selector","encapsulation","None","changeDetection","OnPush","host","template","styles","BoardComponent","_elRef","ngAfterViewInit","bb","tile","getBoundingClientRect","TILE_MARGIN","oneTileSpace","boardWidth","style","NgForOf","GAME_SPEED","MOVE_DOWN_SPEED","GameState","TetrisCoreComponent","initialSpeed","lineCleared","gameOver","state","Paused","gridWidth","gridHeight","_moveDownSpeed","subscribe","_onLineCleared","ngOnChanges","changes","_keyPressed","actionLeft","actionRight","actionRotate","actionDown","actionDrop","actionReset","actionStart","Started","actionStop","key","currentValue","previousValue","emit","Over","TetrisCoreModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"sources":["/home/izulda/Pulpit/tetris-zaliczenie/node_modules/ngx-tetris/fesm2020/ngx-tetris.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\n\nvar PieceRotation;\n(function (PieceRotation) {\n    PieceRotation[PieceRotation[\"DEG_0\"] = 0] = \"DEG_0\";\n    PieceRotation[PieceRotation[\"DEG_90\"] = 1] = \"DEG_90\";\n    PieceRotation[PieceRotation[\"DEG_180\"] = 2] = \"DEG_180\";\n    PieceRotation[PieceRotation[\"DEG_270\"] = 3] = \"DEG_270\";\n})(PieceRotation || (PieceRotation = {}));\nvar PieceTypes;\n(function (PieceTypes) {\n    PieceTypes[PieceTypes[\"Dot\"] = 1] = \"Dot\";\n    PieceTypes[PieceTypes[\"Box\"] = 2] = \"Box\";\n    PieceTypes[PieceTypes[\"Line\"] = 3] = \"Line\";\n    PieceTypes[PieceTypes[\"T\"] = 4] = \"T\";\n    PieceTypes[PieceTypes[\"L\"] = 5] = \"L\";\n    PieceTypes[PieceTypes[\"Lr\"] = 6] = \"Lr\";\n    PieceTypes[PieceTypes[\"Z\"] = 7] = \"Z\";\n    PieceTypes[PieceTypes[\"S\"] = 8] = \"S\";\n})(PieceTypes || (PieceTypes = {}));\n// picked from https://www.romanzolotarev.com/pico-8-color-palette/\nvar PieceColors;\n(function (PieceColors) {\n    PieceColors[\"Box\"] = \"color-box\";\n    PieceColors[\"Dot\"] = \"color-dot\";\n    PieceColors[\"Line\"] = \"color-line\";\n    PieceColors[\"T\"] = \"color-t\";\n    PieceColors[\"L\"] = \"color-l\";\n    PieceColors[\"Lr\"] = \"color-lr\";\n    PieceColors[\"Z\"] = \"color-z\";\n    PieceColors[\"S\"] = \"color-s\";\n})(PieceColors || (PieceColors = {}));\nclass Piece {\n    constructor(x, y, gridSize, maps) {\n        this.color = 'red';\n        this.rotation = PieceRotation.DEG_0;\n        this.map = [\n            [], []\n        ];\n        this._lastConfig = null;\n        this._gridSize = gridSize;\n        this.x = x;\n        this.y = y;\n        this._maps = maps;\n        this.map = this._maps[this.rotation];\n    }\n    get positionsOnGrid() {\n        const acc = [];\n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 4; col++) {\n                if (this.map[row][col]) {\n                    const pos = (this.y + row) * this._gridSize.width + this.x + col;\n                    if (pos > 0) {\n                        acc.push(pos);\n                    }\n                }\n            }\n        }\n        return acc;\n    }\n    store() {\n        this._lastConfig = {\n            x: this.x,\n            y: this.y,\n            rotation: this.rotation,\n            map: this.map\n        };\n    }\n    clearStore() {\n        this._lastConfig = null;\n    }\n    revert() {\n        if (this._lastConfig) {\n            for (const x in this._lastConfig) {\n                if (this._lastConfig.hasOwnProperty(x)) {\n                    // @ts-ignore\n                    this[x] = this._lastConfig[x];\n                }\n            }\n            this._lastConfig = null;\n        }\n    }\n    rotate() {\n        const keys = Object.keys(this._maps);\n        let idx = keys.indexOf(this.rotation.toString());\n        if (idx >= keys.length - 1) {\n            this.rotation = keys[0];\n        }\n        else {\n            this.rotation = keys[++idx];\n        }\n        this.map = this._maps[this.rotation];\n    }\n    moveDown() {\n        this.y++;\n    }\n    moveRight() {\n        this.x++;\n    }\n    moveLeft() {\n        this.x--;\n    }\n    get bottomRow() {\n        return this.y + 3;\n    }\n    get rightCol() {\n        let col = 3;\n        while (col >= 0) {\n            for (let row = 0; row <= 3; row++) {\n                if (this.map[row][col]) {\n                    return this.x + col;\n                }\n            }\n            col--;\n        }\n        return 0;\n    }\n    get leftCol() {\n        return this.x;\n    }\n}\n\nconst MAPS$7 = [];\nMAPS$7[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Box, undefined, undefined, undefined],\n];\nclass Dot extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$7);\n        this.color = PieceColors['Dot'];\n    }\n}\n\nconst MAPS$6 = [];\nMAPS$6[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],\n    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],\n];\nclass Box extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$6);\n        this.color = PieceColors['Box'];\n    }\n}\n\nconst MAPS$5 = [];\nMAPS$5[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line],\n];\nMAPS$5[PieceRotation.DEG_90] = [\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n    [PieceTypes.Line, undefined, undefined, undefined],\n];\nclass Line extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$5);\n        this.color = PieceColors['Line'];\n    }\n}\n\nconst MAPS$4 = [];\nMAPS$4[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],\n];\nMAPS$4[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.T, undefined, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, undefined, undefined, undefined],\n];\nMAPS$4[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n];\nMAPS$4[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n    [PieceTypes.T, PieceTypes.T, undefined, undefined],\n    [undefined, PieceTypes.T, undefined, undefined],\n];\nclass T extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$4);\n        this.color = PieceColors['T'];\n    }\n}\n\nconst MAPS$3 = [];\nMAPS$3[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.Z, undefined, undefined],\n    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],\n    [PieceTypes.Z, undefined, undefined, undefined],\n];\nMAPS$3[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],\n    [undefined, PieceTypes.Z, PieceTypes.Z, undefined],\n];\nclass Z extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$3);\n        this.color = PieceColors['Z'];\n    }\n}\n\nconst MAPS$2 = [];\nMAPS$2[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.S, undefined, undefined, undefined],\n    [PieceTypes.S, PieceTypes.S, undefined, undefined],\n    [undefined, PieceTypes.S, undefined, undefined],\n];\nMAPS$2[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, PieceTypes.S, PieceTypes.S, undefined],\n    [PieceTypes.S, PieceTypes.S, undefined, undefined],\n];\nclass S extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$2);\n        this.color = PieceColors['S'];\n    }\n}\n\nconst MAPS$1 = [];\nMAPS$1[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],\n    [PieceTypes.L, undefined, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.L, PieceTypes.L, undefined, undefined],\n    [undefined, PieceTypes.L, undefined, undefined],\n    [undefined, PieceTypes.L, undefined, undefined],\n];\nMAPS$1[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, PieceTypes.L, undefined],\n    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],\n];\nclass L extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS$1);\n        this.color = PieceColors['L'];\n    }\n}\n\nconst MAPS = [];\nMAPS[PieceRotation.DEG_0] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],\n    [undefined, PieceTypes.Lr, undefined, undefined],\n    [undefined, PieceTypes.Lr, undefined, undefined],\n];\nMAPS[PieceRotation.DEG_90] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, PieceTypes.Lr, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],\n];\nMAPS[PieceRotation.DEG_180] = [\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],\n];\nMAPS[PieceRotation.DEG_270] = [\n    [undefined, undefined, undefined, undefined],\n    [undefined, undefined, undefined, undefined],\n    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],\n    [PieceTypes.Lr, undefined, undefined, undefined],\n];\nclass Lr extends Piece {\n    constructor(x, y, gridSize) {\n        super(x, y, gridSize, MAPS);\n        this.color = PieceColors['Lr'];\n    }\n}\n\nclass PiecesFactory {\n    constructor(_gridSize) {\n        this._gridSize = _gridSize;\n        this._available = [];\n        // @ts-ignore\n        this._available.push(Dot);\n        // @ts-ignore\n        this._available.push(Box);\n        // @ts-ignore\n        this._available.push(Line);\n        // @ts-ignore\n        this._available.push(T);\n        // @ts-ignore\n        this._available.push(Z);\n        // @ts-ignore\n        this._available.push(S);\n        // @ts-ignore\n        this._available.push(L);\n        // @ts-ignore\n        this._available.push(Lr);\n    }\n    getRandomPiecePiece(x, y) {\n        const idx = Math.floor(Math.random() * (this._available.length));\n        // @ts-ignore\n        return new this._available[idx](x, y, this._gridSize);\n        // return new this._available[2](x, y, this._gridSize);\n    }\n}\n\nconst SPAWN_POSITION_X = 4;\nconst SPAWN_POSITION_Y = -4;\nclass Tile {\n    constructor() {\n        this.solid = false;\n        this.color = null;\n    }\n}\nclass GameManagerService {\n    constructor() {\n        this.settings = {\n            tileSize: null\n        };\n        this._gridSize = { width: 0, height: 0 };\n        this._locked = true;\n        this._lineCleared = new Subject();\n        this._gameOver = new Subject();\n        this._keepMovingDown = false;\n        this.lineCleared$ = this._lineCleared.asObservable();\n        this.gameOver$ = this._gameOver.asObservable();\n    }\n    get elementsInRow() {\n        return this._gridSize.width;\n    }\n    initialize(width, height, gameSpeed, tileSize) {\n        this._gridSize.width = width;\n        this._gridSize.height = height;\n        this._gameSpeed = gameSpeed;\n        this._piecesFactory = new PiecesFactory(this._gridSize);\n        if (tileSize) {\n            this.settings.tileSize = tileSize;\n        }\n        this._initializeEmptyBoard();\n        this._spawnNewPiece();\n        this._drawPiece();\n    }\n    start() {\n        clearInterval(this._gameInterval);\n        this._gameInterval = setInterval(() => {\n            this._update();\n        }, this._gameSpeed);\n        this._locked = false;\n    }\n    stop() {\n        this._locked = true;\n        clearInterval(this._gameInterval);\n    }\n    reset() {\n        const emptyTile = new Tile();\n        for (let pos = 0; pos < this.grid.length; pos++) {\n            if (this.grid[pos].color || this.grid[pos].solid) {\n                this.__changeCell(pos, emptyTile);\n            }\n        }\n        this._spawnNewPiece();\n        this._drawPiece();\n    }\n    moveLeft() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveLeft();\n        if (this._collidesLeft()) {\n            this._piece.revert();\n        }\n        this._drawPiece();\n    }\n    moveRight() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveRight();\n        if (this._collidesRight()) {\n            this._piece.revert();\n        }\n        this._drawPiece();\n    }\n    drop() {\n        if (this._locked) {\n            return;\n        }\n        this._keepMovingDown = true;\n        while (!this._collidesBottom() && this._keepMovingDown) {\n            this._update();\n        }\n    }\n    rotate() {\n        if (this._locked) {\n            return;\n        }\n        this._clearPiece();\n        this._piece.store();\n        this._piece.rotate();\n        while (this._collidesRight()) {\n            this._piece.moveLeft();\n            if (this._collidesLeft()) {\n                this._piece.revert();\n                break;\n            }\n        }\n        this._drawPiece();\n    }\n    moveDown() {\n        this._update();\n    }\n    _clearFullLines() {\n        for (let row = this._gridSize.height - 1; row >= 0; row--) {\n            let isFull = true;\n            for (let col = 0; col < this._gridSize.width; col++) {\n                const pos = row * this._gridSize.width + col;\n                if (this.grid[pos].solid === false) {\n                    isFull = false;\n                    break;\n                }\n            }\n            if (isFull) {\n                const emptyRow = Array.apply(null, Array(this._gridSize.width))\n                    .map((idx) => new Tile());\n                const topPortion = this.grid.slice(0, row * this._gridSize.width);\n                this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));\n                this._lineCleared.next();\n            }\n        }\n    }\n    _update() {\n        if (this._locked) {\n            return;\n        }\n        this._locked = true;\n        this._piece.revert();\n        this._clearPiece();\n        this._piece.store();\n        this._piece.moveDown();\n        if (this._collidesBottom()) {\n            this._keepMovingDown = false;\n            this._piece.revert();\n            this._markSolid();\n            this._drawPiece();\n            this._clearFullLines();\n            this._spawnNewPiece();\n            if (this._isGameOver()) {\n                this._onGameOver();\n                return;\n            }\n        }\n        this._drawPiece();\n        this._locked = false;\n    }\n    _isGameOver() {\n        this._piece.store();\n        this._piece.moveDown();\n        if (this._collidesBottom()) {\n            return true;\n        }\n        this._piece.revert();\n        return false;\n    }\n    _onGameOver() {\n        this.stop();\n        this._gameOver.next();\n    }\n    _spawnNewPiece() {\n        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);\n    }\n    _initializeEmptyBoard() {\n        const cellsCount = this._gridSize.width * this._gridSize.height;\n        this.grid = Array.apply(null, Array(cellsCount))\n            .map((idx) => new Tile());\n    }\n    _clearPiece() {\n        this._piece.positionsOnGrid\n            .forEach((pos) => {\n            this.__changeCell(pos, { color: undefined });\n        });\n    }\n    _drawPiece() {\n        this._piece.clearStore();\n        this._piece.positionsOnGrid\n            .forEach((pos) => {\n            this.__changeCell(pos, { color: this._piece.color });\n        });\n    }\n    _markSolid() {\n        this._piece.positionsOnGrid.forEach((pos) => {\n            this.__changeCell(pos, { solid: true });\n        });\n    }\n    __changeCell(pos, data = {}) {\n        this.grid[pos] = Object.assign({}, this.grid[pos], data);\n    }\n    _collidesBottom() {\n        if (this._piece.bottomRow >= this._gridSize.height) {\n            return true;\n        }\n        return this.__collides();\n    }\n    _collidesLeft() {\n        if (this._piece.leftCol < 0) {\n            return true;\n        }\n        return this.__collides();\n    }\n    _collidesRight() {\n        if (this._piece.rightCol >= this._gridSize.width) {\n            return true;\n        }\n        return this.__collides();\n    }\n    __collides() {\n        return this._piece.positionsOnGrid\n            .some((pos) => {\n            if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {\n                return true;\n            }\n            return false;\n        });\n    }\n}\nGameManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nGameManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: GameManagerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass TileComponent {\n    constructor(el, _renderer, _manager) {\n        this.el = el;\n        this._renderer = _renderer;\n        this._manager = _manager;\n        this.tileSize = null;\n        if (this._manager.settings.tileSize) {\n            this.tileSize = this._manager.settings.tileSize;\n        }\n    }\n    ngOnInit() {\n        if (this.data.color) {\n            this._renderer.addClass(this.el.nativeElement, this.data.color);\n        }\n    }\n}\nTileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TileComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: GameManagerService }], target: i0.ɵɵFactoryTarget.Component });\nTileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: TileComponent, selector: \"tile\", inputs: { data: \"data\" }, host: { properties: { \"style.width\": \"tileSize\", \"style.height\": \"tileSize\" } }, ngImport: i0, template: \"\", styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TileComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tile', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '[style.width]': 'tileSize',\n                        '[style.height]': 'tileSize'\n                    }, template: \"\", styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#FFCCAA}tile.color-dot{background:#FF77A8}tile.color-line{background:#83769C}tile.color-t{background:#29ADFF}tile.color-l{background:#00E436}tile.color-lr{background:#FFEC27}tile.color-z{background:#FFA300}tile.color-s{background:#C2C3C7}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: GameManagerService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass BoardComponent {\n    constructor(_manager, _elRef) {\n        this._manager = _manager;\n        this._elRef = _elRef;\n    }\n    ngAfterViewInit() {\n        if (this._manager.settings.tileSize) {\n            const bb = this.tile.el.nativeElement.getBoundingClientRect();\n            const TILE_MARGIN = 1; //px\n            const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n            const boardWidth = oneTileSpace * this._manager.elementsInRow;\n            this._elRef.nativeElement.style['width'] = boardWidth + 'px';\n        }\n    }\n}\nBoardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BoardComponent, deps: [{ token: GameManagerService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBoardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: BoardComponent, selector: \"board\", inputs: { grid: \"grid\" }, viewQueries: [{ propertyName: \"tile\", first: true, predicate: TileComponent, descendants: true }], ngImport: i0, template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\", styles: [\":host{width:290px;display:block}\\n\"], components: [{ type: TileComponent, selector: \"tile\", inputs: [\"data\"] }], directives: [{ type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BoardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'board', template: \"<tile *ngFor=\\\"let tileData of grid\\\"\\n    [data]=\\\"tileData\\\">\\n</tile>\\n\", styles: [\":host{width:290px;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: GameManagerService }, { type: i0.ElementRef }]; }, propDecorators: { grid: [{\n                type: Input\n            }], tile: [{\n                type: ViewChild,\n                args: [TileComponent]\n            }] } });\n\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\nvar GameState;\n(function (GameState) {\n    GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n    GameState[GameState[\"Started\"] = 1] = \"Started\";\n    GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\nclass TetrisCoreComponent {\n    constructor(_manager) {\n        this._manager = _manager;\n        this.initialSpeed = GAME_SPEED;\n        this.rotate = false;\n        this.moveLeft = false;\n        this.moveRight = false;\n        this.moveDown = false;\n        this.drop = false;\n        this.start = false;\n        this.stop = false;\n        this.reset = false;\n        this.lineCleared = new EventEmitter();\n        this.gameOver = new EventEmitter();\n        this.state = GameState.Paused;\n        this.gridWidth = 10;\n        this.gridHeight = 20;\n        this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n        this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n        this._manager.gameOver$.subscribe(() => this._onGameOver());\n    }\n    ngOnInit() {\n        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n        this.grid = this._manager.grid;\n        setInterval(() => {\n            if (this.moveDown) {\n                this._manager.moveDown();\n            }\n        }, this._moveDownSpeed);\n    }\n    ngOnChanges(changes) {\n        if (this._keyPressed(changes['moveLeft'])) {\n            this._manager.moveLeft();\n        }\n        else if (this._keyPressed(changes['moveRight'])) {\n            this._manager.moveRight();\n        }\n        else if (this._keyPressed(changes['drop'])) {\n            this._manager.drop();\n        }\n        if (this._keyPressed(changes['rotate'])) {\n            this._manager.rotate();\n        }\n        if (this._keyPressed(changes['start'])) {\n            this._manager.start();\n        }\n        if (this._keyPressed(changes['stop'])) {\n            this._manager.stop();\n        }\n        if (this._keyPressed(changes['reset'])) {\n            this._manager.reset();\n        }\n    }\n    actionLeft() { this._manager.moveLeft(); }\n    actionRight() { this._manager.moveRight(); }\n    actionRotate() { this._manager.rotate(); }\n    actionDown() { this._manager.moveDown(); }\n    actionDrop() { this._manager.drop(); }\n    actionReset() { this._manager.reset(); }\n    actionStart() {\n        this._manager.start();\n        this.state = GameState.Started;\n    }\n    actionStop() {\n        this._manager.stop();\n        this.state = GameState.Paused;\n    }\n    _keyPressed(key) {\n        return key && key.currentValue && !key.previousValue;\n    }\n    _onLineCleared() {\n        this.lineCleared.emit();\n    }\n    _onGameOver() {\n        this.state = GameState.Over;\n        this.gameOver.emit();\n    }\n}\nTetrisCoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreComponent, deps: [{ token: GameManagerService }], target: i0.ɵɵFactoryTarget.Component });\nTetrisCoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: TetrisCoreComponent, selector: \"tetris-core\", inputs: { tileSize: \"tileSize\", initialSpeed: \"initialSpeed\", rotate: \"rotate\", moveLeft: \"moveLeft\", moveRight: \"moveRight\", moveDown: \"moveDown\", drop: \"drop\", start: \"start\", stop: \"stop\", reset: \"reset\" }, outputs: { lineCleared: \"lineCleared\", gameOver: \"gameOver\" }, usesOnChanges: true, ngImport: i0, template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\", components: [{ type: BoardComponent, selector: \"board\", inputs: [\"grid\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'tetris-core', template: \"<board\\n    [grid]=\\\"grid\\\"></board>\\n\" }]\n        }], ctorParameters: function () { return [{ type: GameManagerService }]; }, propDecorators: { tileSize: [{\n                type: Input\n            }], initialSpeed: [{\n                type: Input\n            }], rotate: [{\n                type: Input\n            }], moveLeft: [{\n                type: Input\n            }], moveRight: [{\n                type: Input\n            }], moveDown: [{\n                type: Input\n            }], drop: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], stop: [{\n                type: Input\n            }], reset: [{\n                type: Input\n            }], lineCleared: [{\n                type: Output\n            }], gameOver: [{\n                type: Output\n            }] } });\n\nclass TetrisCoreModule {\n}\nTetrisCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTetrisCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, declarations: [TetrisCoreComponent,\n        BoardComponent,\n        TileComponent], imports: [CommonModule], exports: [TetrisCoreComponent] });\nTetrisCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, providers: [\n        GameManagerService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: TetrisCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        TetrisCoreComponent,\n                        BoardComponent,\n                        TileComponent\n                    ],\n                    providers: [\n                        GameManagerService\n                    ],\n                    exports: [TetrisCoreComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-tetris\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GameState, TetrisCoreComponent, TetrisCoreModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}